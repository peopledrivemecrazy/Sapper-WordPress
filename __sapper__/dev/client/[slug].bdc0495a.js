import { S as SvelteComponentDev, i as init, d as dispatch_dev, u as globals, s as safe_not_equal, v as validate_slots, e as element, f as claim_element, j as attr_dev, k as add_location, l as insert_dev, b as detach_dev, w as empty, a as space, t as text, q as query_selector_all, c as claim_space, g as children, h as claim_text, m as append_dev, x as set_input_value, y as listen_dev, z as prevent_default, p as set_data_dev, n as noop, A as run_all, o as validate_each_argument, r as destroy_each, H as HtmlTag } from './client.27b2ec5e.js';

/* src\routes\blog\[slug].svelte generated by Svelte v3.24.1 */

const { console: console_1 } = globals;
const file = "src\\routes\\blog\\[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (126:1) {:else}
function create_else_block_1(ctx) {
	let meta;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "Keywords");
			attr_dev(meta, "content", "tech,blog");
			add_location(meta, file, 126, 1, 2461);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(126:1) {:else}",
		ctx
	});

	return block;
}

// (124:1) {#if post._embedded["wp:term"][1].length != 0}
function create_if_block_6(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "Keywords");
			attr_dev(meta, "content", meta_content_value = /*post*/ ctx[0]._embedded["wp:term"][1].map(func));
			add_location(meta, file, 124, 1, 2370);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1 && meta_content_value !== (meta_content_value = /*post*/ ctx[0]._embedded["wp:term"][1].map(func))) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(124:1) {#if post._embedded[\\\"wp:term\\\"][1].length != 0}",
		ctx
	});

	return block;
}

// (136:1) {#if post._embedded["wp:featuredmedia"]}
function create_if_block_5(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:image");
			attr_dev(meta, "content", meta_content_value = /*post*/ ctx[0]._embedded["wp:featuredmedia"][0].source_url);
			add_location(meta, file, 136, 1, 2919);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1 && meta_content_value !== (meta_content_value = /*post*/ ctx[0]._embedded["wp:featuredmedia"][0].source_url)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(136:1) {#if post._embedded[\\\"wp:featuredmedia\\\"]}",
		ctx
	});

	return block;
}

// (144:1) {#if post._embedded["wp:featuredmedia"]}
function create_if_block_4(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image");
			attr_dev(meta, "content", meta_content_value = /*post*/ ctx[0]._embedded["wp:featuredmedia"][0].source_url);
			add_location(meta, file, 144, 1, 3359);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1 && meta_content_value !== (meta_content_value = /*post*/ ctx[0]._embedded["wp:featuredmedia"][0].source_url)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(144:1) {#if post._embedded[\\\"wp:featuredmedia\\\"]}",
		ctx
	});

	return block;
}

// (158:1) {#if post._embedded["wp:featuredmedia"] }
function create_if_block_3(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*post*/ ctx[0]._embedded["wp:featuredmedia"][0].source_url)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*post*/ ctx[0].title.rendered);
			add_location(img, file, 158, 1, 3668);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1 && img.src !== (img_src_value = /*post*/ ctx[0]._embedded["wp:featuredmedia"][0].source_url)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*post*/ 1 && img_alt_value !== (img_alt_value = /*post*/ ctx[0].title.rendered)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(158:1) {#if post._embedded[\\\"wp:featuredmedia\\\"] }",
		ctx
	});

	return block;
}

// (178:27) 
function create_if_block_2(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Comment has been submitted and held for approval");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Comment has been submitted and held for approval");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "success");
			add_location(p, file, 178, 2, 4449);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(178:27) ",
		ctx
	});

	return block;
}

// (176:2) {#if formerrors}
function create_if_block_1(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(/*formerrors*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, /*formerrors*/ ctx[4]);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "errors svelte-16vesbw");
			add_location(p, file, 176, 2, 4381);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*formerrors*/ 16) set_data_dev(t, /*formerrors*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(176:2) {#if formerrors}",
		ctx
	});

	return block;
}

// (193:2) {:else}
function create_else_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("No commets yet :D but you could write one");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "No commets yet :D but you could write one");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 193, 2, 4933);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(193:2) {:else}",
		ctx
	});

	return block;
}

// (182:1) {#if post._embedded.replies}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = /*post*/ ctx[0]._embedded.replies[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1) {
				each_value = /*post*/ ctx[0]._embedded.replies[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(182:1) {#if post._embedded.replies}",
		ctx
	});

	return block;
}

// (184:2) {#each post._embedded.replies[0] as comment}
function create_each_block(ctx) {
	let div1;
	let div0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let span;
	let t1_value = /*comment*/ ctx[6].author_name + "";
	let t1;
	let t2;
	let a;
	let t3_value = /*comment*/ ctx[6].author_url + "";
	let t3;
	let a_href_value;
	let t4;
	let html_tag;
	let raw_value = /*comment*/ ctx[6].content.rendered + "";
	let t5;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			a = element("a");
			t3 = text(t3_value);
			t4 = space();
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div0_nodes);
			span = claim_element(div0_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			t2 = claim_space(span_nodes);
			a = claim_element(span_nodes, "A", { href: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, t3_value);
			a_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			t5 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*comment*/ ctx[6].author_avatar_urls["96"])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*comment*/ ctx[6].author_name);
			attr_dev(img, "class", "svelte-16vesbw");
			add_location(img, file, 186, 3, 4686);
			attr_dev(a, "href", a_href_value = /*comment*/ ctx[6].author_url);
			add_location(a, file, 187, 31, 4789);
			attr_dev(span, "class", "svelte-16vesbw");
			add_location(span, file, 187, 3, 4761);
			attr_dev(div0, "class", "author-meta svelte-16vesbw");
			add_location(div0, file, 185, 3, 4656);
			html_tag = new HtmlTag(t5);
			attr_dev(div1, "class", "comment-item svelte-16vesbw");
			add_location(div1, file, 184, 2, 4625);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, img);
			append_dev(div0, t0);
			append_dev(div0, span);
			append_dev(span, t1);
			append_dev(span, t2);
			append_dev(span, a);
			append_dev(a, t3);
			append_dev(div1, t4);
			html_tag.m(raw_value, div1);
			append_dev(div1, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1 && img.src !== (img_src_value = /*comment*/ ctx[6].author_avatar_urls["96"])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*post*/ 1 && img_alt_value !== (img_alt_value = /*comment*/ ctx[6].author_name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*post*/ 1 && t1_value !== (t1_value = /*comment*/ ctx[6].author_name + "")) set_data_dev(t1, t1_value);
			if (dirty & /*post*/ 1 && t3_value !== (t3_value = /*comment*/ ctx[6].author_url + "")) set_data_dev(t3, t3_value);

			if (dirty & /*post*/ 1 && a_href_value !== (a_href_value = /*comment*/ ctx[6].author_url)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*post*/ 1 && raw_value !== (raw_value = /*comment*/ ctx[6].content.rendered + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(184:2) {#each post._embedded.replies[0] as comment}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let meta0;
	let meta0_content_value;
	let meta1;
	let meta2;
	let meta3;
	let meta3_content_value;
	let meta4;
	let meta4_content_value;
	let meta5;
	let meta5_content_value;
	let meta6;
	let meta6_content_value;
	let meta7;
	let meta8;
	let meta8_content_value;
	let meta9;
	let meta9_content_value;
	let if_block2_anchor;
	let t0;
	let div0;
	let a;
	let t1;
	let t2;
	let t3_value = /*post*/ ctx[0].title.rendered + "";
	let t3;
	let t4;
	let div3;
	let h1;
	let t5_value = /*post*/ ctx[0].title.rendered + "";
	let t5;
	let t6;
	let t7;
	let div1;
	let raw_value = /*post*/ ctx[0].content.rendered + "";
	let t8;
	let div2;
	let h2;
	let t9;
	let t10;
	let form;
	let input0;
	let t11;
	let input1;
	let t12;
	let input2;
	let t13;
	let textarea;
	let t14;
	let button;
	let t15;
	let t16;
	let t17;
	let mounted;
	let dispose;
	document.title = title_value = /*post*/ ctx[0].title.rendered;

	function select_block_type(ctx, dirty) {
		if (/*post*/ ctx[0]._embedded["wp:term"][1].length != 0) return create_if_block_6;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*post*/ ctx[0]._embedded["wp:featuredmedia"] && create_if_block_5(ctx);
	let if_block2 = /*post*/ ctx[0]._embedded["wp:featuredmedia"] && create_if_block_4(ctx);
	let if_block3 = /*post*/ ctx[0]._embedded["wp:featuredmedia"] && create_if_block_3(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*formerrors*/ ctx[4]) return create_if_block_1;
		if (/*commentSuccess*/ ctx[5]) return create_if_block_2;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block4 = current_block_type_1 && current_block_type_1(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*post*/ ctx[0]._embedded.replies) return create_if_block;
		return create_else_block;
	}

	let current_block_type_2 = select_block_type_2(ctx);
	let if_block5 = current_block_type_2(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			if_block0.c();
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			if (if_block1) if_block1.c();
			meta6 = element("meta");
			meta7 = element("meta");
			meta8 = element("meta");
			meta9 = element("meta");
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			t0 = space();
			div0 = element("div");
			a = element("a");
			t1 = text("blog");
			t2 = text(" / ");
			t3 = text(t3_value);
			t4 = space();
			div3 = element("div");
			h1 = element("h1");
			t5 = text(t5_value);
			t6 = space();
			if (if_block3) if_block3.c();
			t7 = space();
			div1 = element("div");
			t8 = space();
			div2 = element("div");
			h2 = element("h2");
			t9 = text("Post discussions");
			t10 = space();
			form = element("form");
			input0 = element("input");
			t11 = space();
			input1 = element("input");
			t12 = space();
			input2 = element("input");
			t13 = space();
			textarea = element("textarea");
			t14 = space();
			button = element("button");
			t15 = text("Submit");
			t16 = space();
			if (if_block4) if_block4.c();
			t17 = space();
			if_block5.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-nfz1ls\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			if_block0.l(head_nodes);
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			meta3 = claim_element(head_nodes, "META", { name: true, content: true });
			meta4 = claim_element(head_nodes, "META", { name: true, content: true });
			meta5 = claim_element(head_nodes, "META", { name: true, content: true });
			if (if_block1) if_block1.l(head_nodes);
			meta6 = claim_element(head_nodes, "META", { property: true, content: true });
			meta7 = claim_element(head_nodes, "META", { property: true, content: true });
			meta8 = claim_element(head_nodes, "META", { property: true, content: true });
			meta9 = claim_element(head_nodes, "META", { property: true, content: true });
			if (if_block2) if_block2.l(head_nodes);
			if_block2_anchor = empty();
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a = claim_element(div0_nodes, "A", { href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "blog");
			a_nodes.forEach(detach_dev);
			t2 = claim_text(div0_nodes, " / ");
			t3 = claim_text(div0_nodes, t3_value);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h1 = claim_element(div3_nodes, "H1", {});
			var h1_nodes = children(h1);
			t5 = claim_text(h1_nodes, t5_value);
			h1_nodes.forEach(detach_dev);
			t6 = claim_space(div3_nodes);
			if (if_block3) if_block3.l(div3_nodes);
			t7 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div1_nodes.forEach(detach_dev);
			t8 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h2 = claim_element(div2_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t9 = claim_text(h2_nodes, "Post discussions");
			h2_nodes.forEach(detach_dev);
			t10 = claim_space(div2_nodes);
			form = claim_element(div2_nodes, "FORM", {});
			var form_nodes = children(form);

			input0 = claim_element(form_nodes, "INPUT", {
				class: true,
				type: true,
				name: true,
				placeholder: true,
				required: true
			});

			t11 = claim_space(form_nodes);

			input1 = claim_element(form_nodes, "INPUT", {
				class: true,
				type: true,
				name: true,
				placeholder: true,
				required: true
			});

			t12 = claim_space(form_nodes);

			input2 = claim_element(form_nodes, "INPUT", {
				class: true,
				type: true,
				name: true,
				placeholder: true
			});

			t13 = claim_space(form_nodes);

			textarea = claim_element(form_nodes, "TEXTAREA", {
				name: true,
				cols: true,
				rows: true,
				class: true
			});

			children(textarea).forEach(detach_dev);
			t14 = claim_space(form_nodes);
			button = claim_element(form_nodes, "BUTTON", { type: true });
			var button_nodes = children(button);
			t15 = claim_text(button_nodes, "Submit");
			button_nodes.forEach(detach_dev);
			t16 = claim_space(form_nodes);
			if (if_block4) if_block4.l(form_nodes);
			form_nodes.forEach(detach_dev);
			t17 = claim_space(div2_nodes);
			if_block5.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "name", "Description");
			attr_dev(meta0, "content", meta0_content_value = /*post*/ ctx[0].excerpt.rendered.replace(/(<p>|<\/p>|\n)/g, ""));
			add_location(meta0, file, 121, 1, 2224);
			attr_dev(meta1, "name", "twitter:card");
			attr_dev(meta1, "content", "summary_large_image");
			add_location(meta1, file, 130, 1, 2518);
			attr_dev(meta2, "name", "twitter:creator");
			attr_dev(meta2, "content", "@shriji");
			add_location(meta2, file, 131, 1, 2579);
			attr_dev(meta3, "name", "twitter:url");
			attr_dev(meta3, "content", meta3_content_value = "" + ("https://jamstack.anoram.com" + "/" + /*post*/ ctx[0].slug));
			add_location(meta3, file, 132, 1, 2631);
			attr_dev(meta4, "name", "twitter:title");
			attr_dev(meta4, "content", meta4_content_value = /*post*/ ctx[0].title.rendered);
			add_location(meta4, file, 133, 1, 2713);
			attr_dev(meta5, "name", "twitter:description");
			attr_dev(meta5, "content", meta5_content_value = /*post*/ ctx[0].excerpt.rendered.replace(/(<p>|<\/p>|\n)/g, ""));
			add_location(meta5, file, 134, 1, 2775);
			attr_dev(meta6, "property", "og:url");
			attr_dev(meta6, "content", meta6_content_value = "" + ("https://jamstack.anoram.com" + "/" + /*post*/ ctx[0].slug));
			add_location(meta6, file, 139, 1, 3020);
			attr_dev(meta7, "property", "og:type");
			attr_dev(meta7, "content", "article");
			add_location(meta7, file, 140, 1, 3103);
			attr_dev(meta8, "property", "og:title");
			attr_dev(meta8, "content", meta8_content_value = /*post*/ ctx[0].title.rendered);
			add_location(meta8, file, 141, 1, 3151);
			attr_dev(meta9, "property", "og:description");
			attr_dev(meta9, "content", meta9_content_value = /*post*/ ctx[0].excerpt.rendered.replace(/(<p>|<\/p>|\n)/g, ""));
			add_location(meta9, file, 142, 1, 3214);
			attr_dev(a, "href", "./blog");
			add_location(a, file, 153, 25, 3511);
			attr_dev(div0, "class", "bread-crumb svelte-16vesbw");
			add_location(div0, file, 153, 0, 3486);
			add_location(h1, file, 156, 1, 3591);
			attr_dev(div1, "class", "content");
			add_location(div1, file, 161, 1, 3767);
			attr_dev(h2, "class", "svelte-16vesbw");
			add_location(h2, file, 166, 1, 3860);
			attr_dev(input0, "class", "form-input svelte-16vesbw");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "name", "name");
			attr_dev(input0, "placeholder", "Name");
			input0.required = true;
			add_location(input0, file, 169, 2, 3940);
			attr_dev(input1, "class", "form-input svelte-16vesbw");
			attr_dev(input1, "type", "email");
			attr_dev(input1, "name", "email");
			attr_dev(input1, "placeholder", "Email");
			input1.required = true;
			add_location(input1, file, 170, 2, 4041);
			attr_dev(input2, "class", "form-input svelte-16vesbw");
			attr_dev(input2, "type", "text");
			attr_dev(input2, "name", "url");
			attr_dev(input2, "placeholder", "Website");
			add_location(input2, file, 171, 2, 4145);
			attr_dev(textarea, "name", "comment");
			attr_dev(textarea, "cols", "30");
			attr_dev(textarea, "rows", "10");
			attr_dev(textarea, "class", "svelte-16vesbw");
			add_location(textarea, file, 173, 2, 4239);
			attr_dev(button, "type", "submit");
			add_location(button, file, 174, 2, 4320);
			add_location(form, file, 168, 1, 3890);
			attr_dev(div2, "class", "comments svelte-16vesbw");
			add_location(div2, file, 165, 1, 3835);
			attr_dev(div3, "class", "blog svelte-16vesbw");
			add_location(div3, file, 155, 0, 3570);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			if_block0.m(document.head, null);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			append_dev(document.head, meta3);
			append_dev(document.head, meta4);
			append_dev(document.head, meta5);
			if (if_block1) if_block1.m(document.head, null);
			append_dev(document.head, meta6);
			append_dev(document.head, meta7);
			append_dev(document.head, meta8);
			append_dev(document.head, meta9);
			if (if_block2) if_block2.m(document.head, null);
			append_dev(document.head, if_block2_anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);
			append_dev(div0, a);
			append_dev(a, t1);
			append_dev(div0, t2);
			append_dev(div0, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, h1);
			append_dev(h1, t5);
			append_dev(div3, t6);
			if (if_block3) if_block3.m(div3, null);
			append_dev(div3, t7);
			append_dev(div3, div1);
			div1.innerHTML = raw_value;
			append_dev(div3, t8);
			append_dev(div3, div2);
			append_dev(div2, h2);
			append_dev(h2, t9);
			append_dev(div2, t10);
			append_dev(div2, form);
			append_dev(form, input0);
			set_input_value(input0, /*name*/ ctx[1]);
			append_dev(form, t11);
			append_dev(form, input1);
			set_input_value(input1, /*email*/ ctx[2]);
			append_dev(form, t12);
			append_dev(form, input2);
			set_input_value(input2, /*url*/ ctx[3]);
			append_dev(form, t13);
			append_dev(form, textarea);
			set_input_value(textarea, /*comment*/ ctx[6]);
			append_dev(form, t14);
			append_dev(form, button);
			append_dev(button, t15);
			append_dev(form, t16);
			if (if_block4) if_block4.m(form, null);
			append_dev(div2, t17);
			if_block5.m(div2, null);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
					listen_dev(input2, "input", /*input2_input_handler*/ ctx[10]),
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[11]),
					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[7]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*post*/ 1 && title_value !== (title_value = /*post*/ ctx[0].title.rendered)) {
				document.title = title_value;
			}

			if (dirty & /*post*/ 1 && meta0_content_value !== (meta0_content_value = /*post*/ ctx[0].excerpt.rendered.replace(/(<p>|<\/p>|\n)/g, ""))) {
				attr_dev(meta0, "content", meta0_content_value);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(meta1.parentNode, meta1);
				}
			}

			if (dirty & /*post*/ 1 && meta3_content_value !== (meta3_content_value = "" + ("https://jamstack.anoram.com" + "/" + /*post*/ ctx[0].slug))) {
				attr_dev(meta3, "content", meta3_content_value);
			}

			if (dirty & /*post*/ 1 && meta4_content_value !== (meta4_content_value = /*post*/ ctx[0].title.rendered)) {
				attr_dev(meta4, "content", meta4_content_value);
			}

			if (dirty & /*post*/ 1 && meta5_content_value !== (meta5_content_value = /*post*/ ctx[0].excerpt.rendered.replace(/(<p>|<\/p>|\n)/g, ""))) {
				attr_dev(meta5, "content", meta5_content_value);
			}

			if (/*post*/ ctx[0]._embedded["wp:featuredmedia"]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					if_block1.m(meta6.parentNode, meta6);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*post*/ 1 && meta6_content_value !== (meta6_content_value = "" + ("https://jamstack.anoram.com" + "/" + /*post*/ ctx[0].slug))) {
				attr_dev(meta6, "content", meta6_content_value);
			}

			if (dirty & /*post*/ 1 && meta8_content_value !== (meta8_content_value = /*post*/ ctx[0].title.rendered)) {
				attr_dev(meta8, "content", meta8_content_value);
			}

			if (dirty & /*post*/ 1 && meta9_content_value !== (meta9_content_value = /*post*/ ctx[0].excerpt.rendered.replace(/(<p>|<\/p>|\n)/g, ""))) {
				attr_dev(meta9, "content", meta9_content_value);
			}

			if (/*post*/ ctx[0]._embedded["wp:featuredmedia"]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_4(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*post*/ 1 && t3_value !== (t3_value = /*post*/ ctx[0].title.rendered + "")) set_data_dev(t3, t3_value);
			if (dirty & /*post*/ 1 && t5_value !== (t5_value = /*post*/ ctx[0].title.rendered + "")) set_data_dev(t5, t5_value);

			if (/*post*/ ctx[0]._embedded["wp:featuredmedia"]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_3(ctx);
					if_block3.c();
					if_block3.m(div3, t7);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty & /*post*/ 1 && raw_value !== (raw_value = /*post*/ ctx[0].content.rendered + "")) div1.innerHTML = raw_value;
			if (dirty & /*name*/ 2 && input0.value !== /*name*/ ctx[1]) {
				set_input_value(input0, /*name*/ ctx[1]);
			}

			if (dirty & /*email*/ 4 && input1.value !== /*email*/ ctx[2]) {
				set_input_value(input1, /*email*/ ctx[2]);
			}

			if (dirty & /*url*/ 8 && input2.value !== /*url*/ ctx[3]) {
				set_input_value(input2, /*url*/ ctx[3]);
			}

			if (dirty & /*comment*/ 64) {
				set_input_value(textarea, /*comment*/ ctx[6]);
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block4) {
				if_block4.p(ctx, dirty);
			} else {
				if (if_block4) if_block4.d(1);
				if_block4 = current_block_type_1 && current_block_type_1(ctx);

				if (if_block4) {
					if_block4.c();
					if_block4.m(form, null);
				}
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block5) {
				if_block5.p(ctx, dirty);
			} else {
				if_block5.d(1);
				if_block5 = current_block_type_2(ctx);

				if (if_block5) {
					if_block5.c();
					if_block5.m(div2, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			detach_dev(meta0);
			if_block0.d(detaching);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(meta3);
			detach_dev(meta4);
			detach_dev(meta5);
			if (if_block1) if_block1.d(detaching);
			detach_dev(meta6);
			detach_dev(meta7);
			detach_dev(meta8);
			detach_dev(meta9);
			if (if_block2) if_block2.d(detaching);
			detach_dev(if_block2_anchor);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div3);
			if (if_block3) if_block3.d();

			if (if_block4) {
				if_block4.d();
			}

			if_block5.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	// the `slug` parameter is available because
	// this file is called [slug].svelte
	const res = await this.fetch(`${"https://sudo.anoram.com/madhu/wp-json/wp/v2"}/posts?_embed&slug=${params.slug}`);

	const data = await res.json();

	if (res.status === 200) {
		return { post: data[0] };
	} else {
		this.error(res.status, data.message);
	}
}

const func = e => e.slug;

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;
	let name, email, url, comment = "";
	let formerrors;
	let commentSuccess = false;

	async function handleSubmit(e) {
		let formdata = new FormData();
		formdata.append("author_name", name);
		formdata.append("author_email", email);
		formdata.append("author_url", url ? url : "");
		formdata.append("content", comment);
		formdata.append("post", post.id);
		let requestOptions = { method: "POST", body: formdata };

		fetch(`${"https://sudo.anoram.com/madhu/wp-json/wp/v2"}/comments`, requestOptions).then(response => response.json()).then(result => {
			console.log(result);

			if (result.code == "rest_comment_content_invalid") {
				$$invalidate(4, formerrors = result.message);
			}

			if (result.code == "rest_invalid_param") {
				$$invalidate(4, formerrors = result.data.params.author_email);
			} else {
				$$invalidate(5, commentSuccess = true);
				($$invalidate(6, comment = ""));
			}

			return result;
		}).catch(error => console.log("error", error));
	}

	const writable_props = ["post"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", $$slots, []);

	function input0_input_handler() {
		name = this.value;
		$$invalidate(1, name);
	}

	function input1_input_handler() {
		email = this.value;
		$$invalidate(2, email);
	}

	function input2_input_handler() {
		url = this.value;
		$$invalidate(3, url);
	}

	function textarea_input_handler() {
		comment = this.value;
		$$invalidate(6, comment);
	}

	$$self.$$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => ({
		preload,
		post,
		name,
		email,
		url,
		comment,
		formerrors,
		commentSuccess,
		handleSubmit
	});

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("email" in $$props) $$invalidate(2, email = $$props.email);
		if ("url" in $$props) $$invalidate(3, url = $$props.url);
		if ("comment" in $$props) $$invalidate(6, comment = $$props.comment);
		if ("formerrors" in $$props) $$invalidate(4, formerrors = $$props.formerrors);
		if ("commentSuccess" in $$props) $$invalidate(5, commentSuccess = $$props.commentSuccess);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		post,
		name,
		email,
		url,
		formerrors,
		commentSuccess,
		comment,
		handleSubmit,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		textarea_input_handler
	];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console_1.warn("<U5Bslugu5D> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
